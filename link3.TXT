select count (facid)from cd.facilities


SELECT count(f.guestcost) from cd.facilities as f
WHERE f.guestcost>=10


SELECT recommendedby,count(memid) FROM cd.members
WHERE recommendedby IS NOT NULL
GROUP BY recommendedby
ORDER BY recommendedby


SELECT b.facid,sum(b.slots) as TotalSlots FROM cd.bookings as b
GROUP BY b.facid
ORDER BY b.facid



SELECT b.facid,sum(b.slots) as TotalSlots from cd.bookings as b
WHERE date_trunc('month',b.starttime)='2012-09-01' 
GROUP BY b.facid
ORDER BY sum(b.slots)



select b.facid,extract(month from b.starttime) as month,sum(b.slots) from cd.bookings as b
WHERE extract(year from b.starttime)=2012
GROUP BY b.facid,month
ORDER BY b.facid,month


SELECT count(DISTINCT memid) from cd.bookings


SELECT b.facid,sum(b.slots) as TotalSlots from cd.bookings as b
GROUP BY b.facid
having sum(b.slots)>1000
ORDER BY b.facid



SELECT f.name, sum(slots * case when memid = 0 then f.guestcost else f.membercost end) as revenue 
FROM cd.facilities as f
INNER JOIN cd.bookings as b ON b.facid=f.facid
GROUP BY f.name
ORDER BY revenue


select name, revenue from (
select f.name, sum(case 
when memid = 0 then slots * f.guestcost else slots * f.membercost end) as revenue
from cd.bookings b
inner join cd.facilities f on b.facid = f.facid
group by f.name)
as agg where revenue < 1000
order by revenue;    



select DISTINCT facid,sum(slots) as TotalSlots from cd.bookings
GROUP BY facid
ORDER BY TotalSlots DESC
LIMIT 1



select facid, extract(month from starttime) as month, sum(slots) as slots from cd.bookings
where starttime >= '2012-01-01' and starttime < '2013-01-01'
group by rollup(facid, month)
order by facid, month;  



SELECT f.facid, f.name, trim(to_char(sum(b.slots)/2.0, '9999999999999999D99')) as TotalHours 
from cd.facilities as f
INNER JOIN cd.bookings b ON(b.facid=f.facid)
GROUP BY f.facid,f,name
ORDER BY f.facid



SELECT m.surname,m.firstname,m.memid,min(b.starttime) from cd.members as m
INNER JOIN cd.bookings b ON(b.memid=m.memid)
where b.starttime >= '2012-09-01'
GROUP BY m.surname,m.firstname,m.memid
ORDER BY m.memid


select count(*) over(), firstname, surname from cd.members order by joindate  


select row_number() over(order by joindate), firstname, surname from cd.members order by joindate      
select facid, total from (
select facid, sum(slots) total, rank() over (order by sum(slots) desc) rank from cd.bookings
group by facid) as ranked
where rank = 1



select firstname, surname,
((sum(b.slots)+10)/20)*10 as hours,
rank() over (order by ((sum(b.slots)+10)/20)*10 desc) as rank
from cd.bookings b
inner join cd.members m on b.memid = m.memid
group by m.memid
order by rank, surname, firstname  



select name, rank from (select f.name as name, rank() over (order by sum(
case when memid = 0 then slots * f.guestcost else slots * membercost end) desc) as rank
from cd.bookings b
inner join cd.facilities f on b.facid = f.facid
group by f.name) as s
where rank <= 3
order by rank



select name, case when class=1 then 'high'
when class=2 then 'average' else 'low' end revenue
from (select f.name as name, ntile(3) over (order by sum(case
when memid = 0 then slots * f.guestcost else slots * membercost end) desc) as class
from cd.bookings b
inner join cd.facilities f
on b.facid = f.facid
group by f.name) as s
order by class, name



select 	f.name as name,f.initialoutlay/((sum(case
when memid = 0 then slots * f.guestcost
else slots * membercost end)/3) - f.monthlymaintenance) as months
from cd.bookings b
inner join cd.facilities f
on b.facid = f.facid
group by f.facid
order by name  



select 	dategen.date,
(select sum(case when memid = 0 then slots * f.guestcost
else slots * membercost end) as rev from cd.bookings b
inner join cd.facilities f on b.facid = f.facid
where b.starttime > dategen.date - interval '14 days'
and b.starttime < dategen.date + interval '1 day')/15 as revenue
from(select 	cast(generate_series(timestamp '2012-08-01',
'2012-08-31','1 day') as date) as date)  as dategen
order by dategen.date
